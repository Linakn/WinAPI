https://github.com/okovtun/PV_122.git
https://www.youtube.com/watch?v=EDLjvLMibQI&list=PLeqyOOqxeiIO13nhWod9y7jd98OmXsgJC


//////////////////////////////////////////////////////////////////////////////////
///////////////////						STL					//////////////////////
//////////////////////////////////////////////////////////////////////////////////

http://cplusplus.com/reference/stl/

TODO:
Реализовать базу данных ГАИ по штрафным квитанциям с помощью бинарного дерева. Ключом будет служить
номер автомашины, значением узла — список правонарушений. Если квитанция добавляется в первый раз,
то в дереве появляется новый узел, а в списке данные по правонарушению; если нет, то данные заносятся в 
существующий список. Необходимо также реализовать следующие операции:
	■ Полная распечатка базы данных (по номерам машин и списку правонарушений, числящихся за ними);
	■ Распечатка данных по заданному номеру;
	■ Распечатка данных по диапазону номеров;
	■ Сохраняйте и загружайте информацию из файла.

DONE:
Создать список (std::list), проинициализировать его числами Фибоначчи, 
вставить в этот список значение по индексу, затем удалить значение по индексу.

DONE:
1. Используя метод insert() http://cplusplus.com/reference/vector/vector/insert/
   вставить значение в вектор по указанному индексу;
2. Используя метод erase() http://cplusplus.com/reference/vector/vector/erase/
   удалить значение из вектора по указанному индексу;
Значение и индекс вводятся с клавиатуры.
3. ***На базе класса ForwardList реализовать класс Stack;


//////////////////////////////////////////////////////////////////////////////////
///////////////////			  DATA CONTAINERS				//////////////////////
//////////////////////////////////////////////////////////////////////////////////

BinaryTree:
https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees
https://ru.wikipedia.org/wiki/%D0%94%D0%B2%D0%BE%D0%B8%D1%87%D0%BD%D0%BE%D0%B5_%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D0%BE

TODO:
В класс BinaryTree добавить методы:
	int Count();	//Возвращает количество элементов дерева	DONE
	int Sum();		//Возвращает сумму элементов дерева			DONE
	int Avg();		//Возвращает среднее арифметическое элементов дерева	DONE
	void erase(int Data);	//Удаляет указанное значение из дерева	DONE
	void Clear();	//Полностью очищает дерево, и делает его пустым	DONE
	CopyMethods;
	MoveMethods;

Вывести дерево как дерево;
Сбалансировать дерево;

LISTS:

TODO:
Создать ветку ListInheritIterators, и в этой ветке, используя наследование оптимизировать итераторы.

TODO:
1. Оптимизировать код добавления элемента в методе insert() до одной строки кода;
2. Написать метод erase();

DONE:
В Solution DataContainers создать проект List2, и в нем реализовать двусвязный список
со всеми необходимыми методами.

DONE:
1. Перегрузить оператор +, который выполняет конкатенацию двух списков,		DONE
   Например:
	ForwardList list1 = {3,5,8,13,21};
	ForwardList list2 = {34,55,89};
	ForwardList list3 = list1 + list2;
	list3.print();
2. Выражение Temp = Temp->pNext заменить выражением Temp++;
3. Вывести список на экран следующим образом:
	ForwardList list = {3,5,8,13,21};
	for(int i:list)//http://cplusplus.com/doc/tutorial/control/
	{
		cout << i << tab;
	}
	cout << endl;

DONE:
В класс ForwardList добавить методы:
1. void erase(???);	//Удаление элемента по индексу
2. Деструктор списка должен очищать список перед удалением;	DONE
3. Оптимизировать процедуры добавления элементов;			DONE
-----------------------------------------------------------
4. CopyMethods;
5. MoveMethods;

DONE:
В класс ForwardList добавить методы:
	void push_back(int Data);	DONE
	void pop_front();			DONE
	void pop_back();			DONE
	-------------------------------
	void insert(???);			DONE
	void erase(???);

//////////////////////////////////////////////////////////////////////////////////
///////////////////				POLYMORPHISM				//////////////////////
//////////////////////////////////////////////////////////////////////////////////

TODO:
1. Описать круг, и нарисовать его средствами GDI: .
2. Добавить иерархию треугольников: 
	-Равносторонний треугольник (EquilateralTriangle);
	-Равнобедренный треугольник (IsoscalesTriangle);
	-Прямоугольный треугольник  (RightTriangle);
	GDI Polygon(...);


TODO:
Реализовать иерархию геометрических фигур: квадрат, прямоугольник, круг, треугольник....
Для каждой фигуры нужно определить ее первичные свойства (квадрат - длина стороны, круг - радиус), 
и вторичные свойства: площадь и периметр. Так же, каждую фигуру нужно нарисовать.
Необходимо сгенерировать фигуры случайным образом, вывести на экран первичны и вторичные 
свойства каждой фигуры, и нарисовать каждую сгенерированную фигуру.

DONE:
Загрузить группу из файла.

DONE:
1. Выровнять вывод группы в консоль в виде таблицы;
	cout.width(10)
2. Перегрузить оператор ввода для всех классов в проекте Academy, 
   и написать прверочный код для них;

DONE:
1. В ветке AcademySeparation Все классы с проекте Academy вынести в отдельные файлы;
2.* В проекте Academy сохранить массив group в файл;
3.** В проекте Academy загрузить массив group из файла;

TODO:
http://cplusplus.com/doc/tutorial/inheritance/
http://cplusplus.com/doc/tutorial/polymorphism/
https://drive.google.com/drive/folders/1mIhAKMp5-Jpy6s5X8u924tRCXFEdHE_z?usp=sharing

DONE:
В проекте Academy реализовать классы Teacher и Graduate(Дипломник), 
и написать проверочный код для них.

DONE:
1. В класс Matrix добавить Move методы и арифметические операторы: +, -, *;
2. Реализовать класс Binary описывающий двоичное число.
   Обеспечить арифметические и побитовые операции над двоичными числами
   Арифметические:	+, -, *, /;
   Побитовые:		~ - NOT;
					| -  OR;
					& - AND;
   А так же операции сравнения: ==, !=, >, <, >=, <=;

TOREAD:
http://cplusplus.com/doc/tutorial/classes2/

DONE:
1. В классе Fraction написать конструктор с одним параметром типа double,
   который будет преобразовывать десятичные дроби в обычные дроби:
   Fraction A = 2.75;
				(double)
   cout << A << endl;	//	2(3/4)			DONE

2. Проверочный код в проекте String должен заработать:	DONE
	https://github.com/okovtun/PV_122/blob/1d606dcef2d3442cf27017ab1028c6360a17bc65/IntroductionToOOP/String/main.cpp#L88

3. В отдельном проекте реализовать класс String, описывающий строку.
   Должна быть возможность создавать объекты следующим образом:
	String str;		//Создается пустая строка размером 80 Byte	DONE
	String str1 = "Hello";		DONE
	String str2 = "World";		DONE
	String str3 = str1 + str2;	//Конкатенация строк
	cout << str3 << endl;	//HelloWorld

DONE:
В классе Fraction реализовать:
1. Оператор перенправления в поток:				DONE
	Fraction A(2, 3);
	cout << A << endl;
2. Арифметические операции: +, -, *, /;			DONE
3. Составные присваивания:  +=, -=, *=, /=;		DONE
--------------------------------------------------------------
4. Increment/Decrement;							DONE
5. Операции сравнения: ==, !=, >, <, >=, <=;	DONE
6. Реализовать метод reduce(); который сокращает простую дробь;	DONE
	https://www.webmath.ru/poleznoe/formules_12_7.php
7. Обеспечить ввод дробей с клавиатуры:
	Fraction A;
	cin >> A;
	cout << A << endl;

DONE:
1. Выучить теорию!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
2. В отдельном проекте реализовать класс Fraction, описывающие простую дробь.
   В классе должны быть все необходимые методы. Так же должна быть возможность
   выполнять арифметические и прочие операции над дробями.


DONE:
0. ВЫУЧИТЬ ТЕОРИЮ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
1. В классе Point написать метод ??? distance(???), который возващает расстояние 
   ДО УКАЗАННОЙ ТОЧКИ;		DONE
2. Написать функцию ??? distance(???), которая возвращает расстояние между двумя точками.